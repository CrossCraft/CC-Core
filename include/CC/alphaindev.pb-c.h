/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: CC/alphaindev.proto */

#ifndef PROTOBUF_C_CC_2falphaindev_2eproto__INCLUDED
#define PROTOBUF_C_CC_2falphaindev_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct NetString NetString;
typedef struct KeepAlivePacket KeepAlivePacket;
typedef struct LoginPacketCS LoginPacketCS;
typedef struct LoginPacketSC LoginPacketSC;
typedef struct HandshakePacketCS HandshakePacketCS;
typedef struct HandshakePacketSC HandshakePacketSC;
typedef struct ChatMessagePacket ChatMessagePacket;
typedef struct TimeUpdatePacketSC TimeUpdatePacketSC;
typedef struct EntityEquipmentPacketSC EntityEquipmentPacketSC;
typedef struct SpawnPositionPacketSC SpawnPositionPacketSC;
typedef struct UseEntityPacketCS UseEntityPacketCS;
typedef struct UpdateHealthPacketSC UpdateHealthPacketSC;
typedef struct RespawnDataSC RespawnDataSC;
typedef struct PlayerCS PlayerCS;
typedef struct PlayerPositionCS PlayerPositionCS;
typedef struct PlayerLookCS PlayerLookCS;
typedef struct PlayerPositionAndLookCS PlayerPositionAndLookCS;
typedef struct PlayerPositionAndLookSC PlayerPositionAndLookSC;
typedef struct PlayerDiggingCS PlayerDiggingCS;
typedef struct PlayerPlaceCS PlayerPlaceCS;
typedef struct HeldItemChangeCS HeldItemChangeCS;
typedef struct ItemData ItemData;
typedef struct AddToInventorySC AddToInventorySC;
typedef struct EntityAnimation EntityAnimation;
typedef struct SpawnNamedEntitySC SpawnNamedEntitySC;
typedef struct SpawnDroppedItemSC SpawnDroppedItemSC;
typedef struct CollectItemSC CollectItemSC;
typedef struct SpawnObjectSC SpawnObjectSC;
typedef struct SpawnMobSC SpawnMobSC;
typedef struct EntityVelocitySC EntityVelocitySC;
typedef struct EntityDestroySC EntityDestroySC;
typedef struct EntitySC EntitySC;
typedef struct EntityRelativeMoveSC EntityRelativeMoveSC;
typedef struct EntityLookSC EntityLookSC;
typedef struct EntityLookAndRelativeMoveSC EntityLookAndRelativeMoveSC;
typedef struct EntityTeleportSC EntityTeleportSC;
typedef struct EntityStatusSC EntityStatusSC;
typedef struct AttachEntitySC AttachEntitySC;
typedef struct LevelInitializeSC LevelInitializeSC;
typedef struct LevelDataSC LevelDataSC;
typedef struct LevelFinalizeSC LevelFinalizeSC;
typedef struct MultiBlockChangeSC MultiBlockChangeSC;
typedef struct BlockChangeSC BlockChangeSC;
typedef struct TileEntitySC TileEntitySC;
typedef struct ExplosionSC ExplosionSC;
typedef struct KickSC KickSC;
typedef struct GeneralPacket GeneralPacket;


/* --- enums --- */

typedef enum _PacketType {
  PACKET_TYPE__CC_PACKET_TYPE_PING = 0,
  PACKET_TYPE__CC_PACKET_TYPE_LOGIN = 1,
  PACKET_TYPE__CC_PACKET_TYPE_HANDSHAKE = 2,
  PACKET_TYPE__CC_PACKET_TYPE_CHAT_MESSAGE = 3,
  PACKET_TYPE__CC_PACKET_TYPE_TIME_UPDATE = 4,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_EQUIPMENT = 5,
  PACKET_TYPE__CC_PACKET_TYPE_SPAWN_POSITION = 6,
  PACKET_TYPE__CC_PACKET_TYPE_USE_ENTITY = 7,
  PACKET_TYPE__CC_PACKET_TYPE_UPDATE_HEALTH = 8,
  PACKET_TYPE__CC_PACKET_TYPE_RESPAWN = 9,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER = 10,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER_POSITION = 11,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER_LOOK = 12,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER_POSITION_AND_LOOK = 13,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER_DIGGING = 14,
  PACKET_TYPE__CC_PACKET_TYPE_PLAYER_BLOCK_PLACEMENT = 15,
  PACKET_TYPE__CC_PACKET_TYPE_HELD_ITEM_CHANGE = 16,
  PACKET_TYPE__CC_PACKET_TYPE_ADD_TO_INVENTORY = 17,
  PACKET_TYPE__CC_PACKET_TYPE_ANIMATION = 18,
  PACKET_TYPE__CC_PACKET_TYPE_NAMED_ENTITY_SPAWN = 20,
  PACKET_TYPE__CC_PACKET_TYPE_SPAWN_DROPPED_ITEM = 21,
  PACKET_TYPE__CC_PACKET_TYPE_COLLECT_ITEM = 22,
  PACKET_TYPE__CC_PACKET_TYPE_SPAWN_OBJECT_VEHICLE = 23,
  PACKET_TYPE__CC_PACKET_TYPE_SPAWN_MOB = 24,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_VELOCITY = 28,
  PACKET_TYPE__CC_PACKET_TYPE_DESTROY_ENTITY = 29,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY = 30,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_RELATIVE_MOVE = 31,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_LOOK = 32,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_LOOK_AND_RELATIVE_MOVE = 33,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_TELEPORT = 34,
  PACKET_TYPE__CC_PACKET_TYPE_ENTITY_STATUS = 38,
  PACKET_TYPE__CC_PACKET_TYPE_ATTACH_ENTITY = 39,
  /*
   * CUSTOM PACKET -- BASED ON CLASSIC CLIENT
   */
  PACKET_TYPE__CC_PACKET_TYPE_LEVEL_INIT = 48,
  /*
   * CUSTOM PACKET -- BASED ON CLASSIC CLIENT
   */
  PACKET_TYPE__CC_PACKET_TYPE_LEVEL_DATA = 49,
  /*
   * CUSTOM PACKET -- BASED ON CLASSIC CLIENT
   */
  PACKET_TYPE__CC_PACKET_TYPE_LEVEL_FINALIZE = 50,
  PACKET_TYPE__CC_PACKET_TYPE_MULTI_BLOCK_CHANGE = 52,
  PACKET_TYPE__CC_PACKET_TYPE_BLOCK_CHANGE = 53,
  PACKET_TYPE__CC_PACKET_TYPE_TILE_ENTITY = 59,
  PACKET_TYPE__CC_PACKET_TYPE_EXPLOSION = 60,
  PACKET_TYPE__CC_PACKET_TYPE_KICK = 255
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PACKET_TYPE)
} PacketType;

/* --- messages --- */

struct  NetString
{
  ProtobufCMessage base;
  uint32_t length;
  ProtobufCBinaryData data;
};
#define NET_STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_string__descriptor) \
    , 0, {0,NULL} }


struct  KeepAlivePacket
{
  ProtobufCMessage base;
  int32_t id;
};
#define KEEP_ALIVE_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&keep_alive_packet__descriptor) \
    , 0 }


struct  LoginPacketCS
{
  ProtobufCMessage base;
  int32_t protocol_version;
  NetString *username;
  NetString *password;
  uint64_t seed;
  int32_t dimension;
};
#define LOGIN_PACKET_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_packet_cs__descriptor) \
    , 0, NULL, NULL, 0, 0 }


struct  LoginPacketSC
{
  ProtobufCMessage base;
  /*
   * 8 bytes of zeroes
   */
  ProtobufCBinaryData zeroes;
};
#define LOGIN_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_packet_sc__descriptor) \
    , {0,NULL} }


struct  HandshakePacketCS
{
  ProtobufCMessage base;
  NetString *username;
};
#define HANDSHAKE_PACKET_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handshake_packet_cs__descriptor) \
    , NULL }


struct  HandshakePacketSC
{
  ProtobufCMessage base;
  NetString *response;
};
#define HANDSHAKE_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&handshake_packet_sc__descriptor) \
    , NULL }


struct  ChatMessagePacket
{
  ProtobufCMessage base;
  NetString *message;
};
#define CHAT_MESSAGE_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_message_packet__descriptor) \
    , NULL }


struct  TimeUpdatePacketSC
{
  ProtobufCMessage base;
  int64_t time;
};
#define TIME_UPDATE_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&time_update_packet_sc__descriptor) \
    , 0 }


struct  EntityEquipmentPacketSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t slot;
  int32_t item_id;
  int32_t damage;
};
#define ENTITY_EQUIPMENT_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_equipment_packet_sc__descriptor) \
    , 0, 0, 0, 0 }


struct  SpawnPositionPacketSC
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
};
#define SPAWN_POSITION_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spawn_position_packet_sc__descriptor) \
    , 0, 0, 0 }


struct  UseEntityPacketCS
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t target_entity;
  int32_t left_click;
};
#define USE_ENTITY_PACKET_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&use_entity_packet_cs__descriptor) \
    , 0, 0, 0 }


struct  UpdateHealthPacketSC
{
  ProtobufCMessage base;
  int32_t health;
};
#define UPDATE_HEALTH_PACKET_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_health_packet_sc__descriptor) \
    , 0 }


struct  RespawnDataSC
{
  ProtobufCMessage base;
};
#define RESPAWN_DATA_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&respawn_data_sc__descriptor) \
     }


struct  PlayerCS
{
  ProtobufCMessage base;
  int32_t on_ground;
};
#define PLAYER_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_cs__descriptor) \
    , 0 }


struct  PlayerPositionCS
{
  ProtobufCMessage base;
  double x;
  double y;
  double stance;
  double z;
  int32_t on_ground;
};
#define PLAYER_POSITION_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_position_cs__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  PlayerLookCS
{
  ProtobufCMessage base;
  float yaw;
  float pitch;
  int32_t on_ground;
};
#define PLAYER_LOOK_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_look_cs__descriptor) \
    , 0, 0, 0 }


struct  PlayerPositionAndLookCS
{
  ProtobufCMessage base;
  double x;
  double y;
  double stance;
  double z;
  float yaw;
  float pitch;
  int32_t on_ground;
};
#define PLAYER_POSITION_AND_LOOK_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_position_and_look_cs__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  PlayerPositionAndLookSC
{
  ProtobufCMessage base;
  double x;
  double stance;
  double y;
  double z;
  float yaw;
  float pitch;
  int32_t on_ground;
};
#define PLAYER_POSITION_AND_LOOK_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_position_and_look_sc__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  PlayerDiggingCS
{
  ProtobufCMessage base;
  int32_t status;
  int32_t x;
  int32_t y;
  int32_t z;
  int32_t face;
};
#define PLAYER_DIGGING_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_digging_cs__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  PlayerPlaceCS
{
  ProtobufCMessage base;
  int32_t item_id;
  int32_t x;
  int32_t y;
  int32_t z;
  int32_t face;
};
#define PLAYER_PLACE_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_place_cs__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  HeldItemChangeCS
{
  ProtobufCMessage base;
  int32_t slot;
};
#define HELD_ITEM_CHANGE_CS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&held_item_change_cs__descriptor) \
    , 0 }


struct  ItemData
{
  ProtobufCMessage base;
  int32_t item_id;
  int32_t count;
  int32_t damage;
};
#define ITEM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&item_data__descriptor) \
    , 0, 0, 0 }


struct  AddToInventorySC
{
  ProtobufCMessage base;
  ItemData *item;
};
#define ADD_TO_INVENTORY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_to_inventory_sc__descriptor) \
    , NULL }


struct  EntityAnimation
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t animation;
};
#define ENTITY_ANIMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_animation__descriptor) \
    , 0, 0 }


struct  SpawnNamedEntitySC
{
  ProtobufCMessage base;
  int32_t entity_id;
  NetString *name;
  int32_t x;
  int32_t y;
  int32_t z;
  int32_t yaw;
  int32_t pitch;
  int32_t item;
};
#define SPAWN_NAMED_ENTITY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spawn_named_entity_sc__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0 }


struct  SpawnDroppedItemSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  ItemData *item;
  int32_t x;
  int32_t y;
  int32_t z;
  uint32_t yaw;
  uint32_t pitch;
  uint32_t roll;
};
#define SPAWN_DROPPED_ITEM_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spawn_dropped_item_sc__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0 }


struct  CollectItemSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t player_id;
};
#define COLLECT_ITEM_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&collect_item_sc__descriptor) \
    , 0, 0 }


struct  SpawnObjectSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  uint32_t type;
  int32_t x;
  int32_t y;
  int32_t z;
};
#define SPAWN_OBJECT_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spawn_object_sc__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  SpawnMobSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  uint32_t type;
  int32_t x;
  int32_t y;
  int32_t z;
  uint32_t yaw;
  uint32_t pitch;
};
#define SPAWN_MOB_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spawn_mob_sc__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  EntityVelocitySC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t vx;
  int32_t vy;
  int32_t vz;
};
#define ENTITY_VELOCITY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_velocity_sc__descriptor) \
    , 0, 0, 0, 0 }


struct  EntityDestroySC
{
  ProtobufCMessage base;
  int32_t entity_id;
};
#define ENTITY_DESTROY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_destroy_sc__descriptor) \
    , 0 }


struct  EntitySC
{
  ProtobufCMessage base;
  int32_t entity_id;
};
#define ENTITY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_sc__descriptor) \
    , 0 }


struct  EntityRelativeMoveSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t dx;
  int32_t dy;
  int32_t dz;
};
#define ENTITY_RELATIVE_MOVE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_relative_move_sc__descriptor) \
    , 0, 0, 0, 0 }


struct  EntityLookSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t yaw;
  int32_t pitch;
};
#define ENTITY_LOOK_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_look_sc__descriptor) \
    , 0, 0, 0 }


struct  EntityLookAndRelativeMoveSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t dx;
  int32_t dy;
  int32_t dz;
  int32_t yaw;
  int32_t pitch;
};
#define ENTITY_LOOK_AND_RELATIVE_MOVE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_look_and_relative_move_sc__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  EntityTeleportSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t x;
  int32_t y;
  int32_t z;
  int32_t yaw;
  int32_t pitch;
};
#define ENTITY_TELEPORT_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_teleport_sc__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  EntityStatusSC
{
  ProtobufCMessage base;
  int32_t entity_id;
  uint32_t status;
};
#define ENTITY_STATUS_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&entity_status_sc__descriptor) \
    , 0, 0 }


struct  AttachEntitySC
{
  ProtobufCMessage base;
  int32_t entity_id;
  int32_t vehicle_id;
};
#define ATTACH_ENTITY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attach_entity_sc__descriptor) \
    , 0, 0 }


struct  LevelInitializeSC
{
  ProtobufCMessage base;
  uint64_t seed;
};
#define LEVEL_INITIALIZE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&level_initialize_sc__descriptor) \
    , 0 }


struct  LevelDataSC
{
  ProtobufCMessage base;
  int32_t chunklength;
  ProtobufCBinaryData chunkdata;
  uint32_t percentcomplete;
};
#define LEVEL_DATA_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&level_data_sc__descriptor) \
    , 0, {0,NULL}, 0 }


struct  LevelFinalizeSC
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
};
#define LEVEL_FINALIZE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&level_finalize_sc__descriptor) \
    , 0, 0, 0 }


struct  MultiBlockChangeSC
{
  ProtobufCMessage base;
  uint32_t size;
  ProtobufCBinaryData data;
};
#define MULTI_BLOCK_CHANGE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&multi_block_change_sc__descriptor) \
    , 0, {0,NULL} }


struct  BlockChangeSC
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
  uint32_t type;
};
#define BLOCK_CHANGE_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&block_change_sc__descriptor) \
    , 0, 0, 0, 0 }


struct  TileEntitySC
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
  uint32_t size;
  ProtobufCBinaryData data;
};
#define TILE_ENTITY_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tile_entity_sc__descriptor) \
    , 0, 0, 0, 0, {0,NULL} }


struct  ExplosionSC
{
  ProtobufCMessage base;
  double x;
  double y;
  double z;
  float radius;
  int32_t count;
  ProtobufCBinaryData data;
};
#define EXPLOSION_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&explosion_sc__descriptor) \
    , 0, 0, 0, 0, 0, {0,NULL} }


struct  KickSC
{
  ProtobufCMessage base;
  NetString *reason;
};
#define KICK_SC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kick_sc__descriptor) \
    , NULL }


typedef enum {
  GENERAL_PACKET__PACKET_CONTENT__NOT_SET = 0,
  GENERAL_PACKET__PACKET_CONTENT_KEEP_ALIVE_PACKET = 2,
  GENERAL_PACKET__PACKET_CONTENT_LOGIN_PACKET_CS = 3,
  GENERAL_PACKET__PACKET_CONTENT_LOGIN_PACKET_SC = 4,
  GENERAL_PACKET__PACKET_CONTENT_HANDSHAKE_PACKET_CS = 5,
  GENERAL_PACKET__PACKET_CONTENT_HANDSHAKE_PACKET_SC = 6,
  GENERAL_PACKET__PACKET_CONTENT_CHAT_MESSAGE_PACKET = 7,
  GENERAL_PACKET__PACKET_CONTENT_TIME_UPDATE_PACKET_SC = 8,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_EQUIPMENT_PACKET_SC = 9,
  GENERAL_PACKET__PACKET_CONTENT_SPAWN_POSITION_PACKET_SC = 10,
  GENERAL_PACKET__PACKET_CONTENT_USE_ENTITY_PACKET_CS = 11,
  GENERAL_PACKET__PACKET_CONTENT_UPDATE_HEALTH_PACKET_SC = 12,
  GENERAL_PACKET__PACKET_CONTENT_RESPAWN_DATA_SC = 13,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_CS = 14,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_POSITION_CS = 15,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_LOOK_CS = 16,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_POSITION_AND_LOOK_CS = 17,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_POSITION_AND_LOOK_SC = 18,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_DIGGING_CS = 19,
  GENERAL_PACKET__PACKET_CONTENT_PLAYER_PLACE_CS = 20,
  GENERAL_PACKET__PACKET_CONTENT_HELD_ITEM_CHANGE_CS = 21,
  GENERAL_PACKET__PACKET_CONTENT_ADD_TO_INVENTORY_SC = 22,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_ANIMATION = 23,
  GENERAL_PACKET__PACKET_CONTENT_SPAWN_NAMED_ENTITY_SC = 24,
  GENERAL_PACKET__PACKET_CONTENT_SPAWN_DROPPED_ITEM_SC = 25,
  GENERAL_PACKET__PACKET_CONTENT_COLLECT_ITEM_SC = 26,
  GENERAL_PACKET__PACKET_CONTENT_SPAWN_OBJECT_SC = 27,
  GENERAL_PACKET__PACKET_CONTENT_SPAWN_MOB_SC = 28,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_VELOCITY_SC = 29,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_DESTROY_SC = 30,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_SC = 31,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_RELATIVE_MOVE_SC = 32,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_LOOK_SC = 33,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_LOOK_AND_RELATIVE_MOVE_SC = 34,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_TELEPORT_SC = 35,
  GENERAL_PACKET__PACKET_CONTENT_ENTITY_STATUS_SC = 36,
  GENERAL_PACKET__PACKET_CONTENT_ATTACH_ENTITY_SC = 37,
  GENERAL_PACKET__PACKET_CONTENT_LEVEL_INITIALIZE_SC = 38,
  GENERAL_PACKET__PACKET_CONTENT_LEVEL_DATA_SC = 39,
  GENERAL_PACKET__PACKET_CONTENT_LEVEL_FINALIZE_SC = 40,
  GENERAL_PACKET__PACKET_CONTENT_MULTI_BLOCK_CHANGE_SC = 41,
  GENERAL_PACKET__PACKET_CONTENT_BLOCK_CHANGE_SC = 42,
  GENERAL_PACKET__PACKET_CONTENT_TILE_ENTITY_SC = 43,
  GENERAL_PACKET__PACKET_CONTENT_EXPLOSION_SC = 44,
  GENERAL_PACKET__PACKET_CONTENT_KICK_SC = 45
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GENERAL_PACKET__PACKET_CONTENT__CASE)
} GeneralPacket__PacketContentCase;

struct  GeneralPacket
{
  ProtobufCMessage base;
  PacketType packet_type;
  GeneralPacket__PacketContentCase packet_content_case;
  union {
    KeepAlivePacket *keep_alive_packet;
    LoginPacketCS *login_packet_cs;
    LoginPacketSC *login_packet_sc;
    HandshakePacketCS *handshake_packet_cs;
    HandshakePacketSC *handshake_packet_sc;
    ChatMessagePacket *chat_message_packet;
    TimeUpdatePacketSC *time_update_packet_sc;
    EntityEquipmentPacketSC *entity_equipment_packet_sc;
    SpawnPositionPacketSC *spawn_position_packet_sc;
    UseEntityPacketCS *use_entity_packet_cs;
    UpdateHealthPacketSC *update_health_packet_sc;
    RespawnDataSC *respawn_data_sc;
    PlayerCS *player_cs;
    PlayerPositionCS *player_position_cs;
    PlayerLookCS *player_look_cs;
    PlayerPositionAndLookCS *player_position_and_look_cs;
    PlayerPositionAndLookSC *player_position_and_look_sc;
    PlayerDiggingCS *player_digging_cs;
    PlayerPlaceCS *player_place_cs;
    HeldItemChangeCS *held_item_change_cs;
    AddToInventorySC *add_to_inventory_sc;
    EntityAnimation *entity_animation;
    SpawnNamedEntitySC *spawn_named_entity_sc;
    SpawnDroppedItemSC *spawn_dropped_item_sc;
    CollectItemSC *collect_item_sc;
    SpawnObjectSC *spawn_object_sc;
    SpawnMobSC *spawn_mob_sc;
    EntityVelocitySC *entity_velocity_sc;
    EntityDestroySC *entity_destroy_sc;
    EntitySC *entity_sc;
    EntityRelativeMoveSC *entity_relative_move_sc;
    EntityLookSC *entity_look_sc;
    EntityLookAndRelativeMoveSC *entity_look_and_relative_move_sc;
    EntityTeleportSC *entity_teleport_sc;
    EntityStatusSC *entity_status_sc;
    AttachEntitySC *attach_entity_sc;
    LevelInitializeSC *level_initialize_sc;
    LevelDataSC *level_data_sc;
    LevelFinalizeSC *level_finalize_sc;
    MultiBlockChangeSC *multi_block_change_sc;
    BlockChangeSC *block_change_sc;
    TileEntitySC *tile_entity_sc;
    ExplosionSC *explosion_sc;
    KickSC *kick_sc;
  };
};
#define GENERAL_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&general_packet__descriptor) \
    , PACKET_TYPE__CC_PACKET_TYPE_PING, GENERAL_PACKET__PACKET_CONTENT__NOT_SET, {0} }


/* NetString methods */
void   net_string__init
                     (NetString         *message);
size_t net_string__get_packed_size
                     (const NetString   *message);
size_t net_string__pack
                     (const NetString   *message,
                      uint8_t             *out);
size_t net_string__pack_to_buffer
                     (const NetString   *message,
                      ProtobufCBuffer     *buffer);
NetString *
       net_string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_string__free_unpacked
                     (NetString *message,
                      ProtobufCAllocator *allocator);
/* KeepAlivePacket methods */
void   keep_alive_packet__init
                     (KeepAlivePacket         *message);
size_t keep_alive_packet__get_packed_size
                     (const KeepAlivePacket   *message);
size_t keep_alive_packet__pack
                     (const KeepAlivePacket   *message,
                      uint8_t             *out);
size_t keep_alive_packet__pack_to_buffer
                     (const KeepAlivePacket   *message,
                      ProtobufCBuffer     *buffer);
KeepAlivePacket *
       keep_alive_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   keep_alive_packet__free_unpacked
                     (KeepAlivePacket *message,
                      ProtobufCAllocator *allocator);
/* LoginPacketCS methods */
void   login_packet_cs__init
                     (LoginPacketCS         *message);
size_t login_packet_cs__get_packed_size
                     (const LoginPacketCS   *message);
size_t login_packet_cs__pack
                     (const LoginPacketCS   *message,
                      uint8_t             *out);
size_t login_packet_cs__pack_to_buffer
                     (const LoginPacketCS   *message,
                      ProtobufCBuffer     *buffer);
LoginPacketCS *
       login_packet_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_packet_cs__free_unpacked
                     (LoginPacketCS *message,
                      ProtobufCAllocator *allocator);
/* LoginPacketSC methods */
void   login_packet_sc__init
                     (LoginPacketSC         *message);
size_t login_packet_sc__get_packed_size
                     (const LoginPacketSC   *message);
size_t login_packet_sc__pack
                     (const LoginPacketSC   *message,
                      uint8_t             *out);
size_t login_packet_sc__pack_to_buffer
                     (const LoginPacketSC   *message,
                      ProtobufCBuffer     *buffer);
LoginPacketSC *
       login_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_packet_sc__free_unpacked
                     (LoginPacketSC *message,
                      ProtobufCAllocator *allocator);
/* HandshakePacketCS methods */
void   handshake_packet_cs__init
                     (HandshakePacketCS         *message);
size_t handshake_packet_cs__get_packed_size
                     (const HandshakePacketCS   *message);
size_t handshake_packet_cs__pack
                     (const HandshakePacketCS   *message,
                      uint8_t             *out);
size_t handshake_packet_cs__pack_to_buffer
                     (const HandshakePacketCS   *message,
                      ProtobufCBuffer     *buffer);
HandshakePacketCS *
       handshake_packet_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handshake_packet_cs__free_unpacked
                     (HandshakePacketCS *message,
                      ProtobufCAllocator *allocator);
/* HandshakePacketSC methods */
void   handshake_packet_sc__init
                     (HandshakePacketSC         *message);
size_t handshake_packet_sc__get_packed_size
                     (const HandshakePacketSC   *message);
size_t handshake_packet_sc__pack
                     (const HandshakePacketSC   *message,
                      uint8_t             *out);
size_t handshake_packet_sc__pack_to_buffer
                     (const HandshakePacketSC   *message,
                      ProtobufCBuffer     *buffer);
HandshakePacketSC *
       handshake_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   handshake_packet_sc__free_unpacked
                     (HandshakePacketSC *message,
                      ProtobufCAllocator *allocator);
/* ChatMessagePacket methods */
void   chat_message_packet__init
                     (ChatMessagePacket         *message);
size_t chat_message_packet__get_packed_size
                     (const ChatMessagePacket   *message);
size_t chat_message_packet__pack
                     (const ChatMessagePacket   *message,
                      uint8_t             *out);
size_t chat_message_packet__pack_to_buffer
                     (const ChatMessagePacket   *message,
                      ProtobufCBuffer     *buffer);
ChatMessagePacket *
       chat_message_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_message_packet__free_unpacked
                     (ChatMessagePacket *message,
                      ProtobufCAllocator *allocator);
/* TimeUpdatePacketSC methods */
void   time_update_packet_sc__init
                     (TimeUpdatePacketSC         *message);
size_t time_update_packet_sc__get_packed_size
                     (const TimeUpdatePacketSC   *message);
size_t time_update_packet_sc__pack
                     (const TimeUpdatePacketSC   *message,
                      uint8_t             *out);
size_t time_update_packet_sc__pack_to_buffer
                     (const TimeUpdatePacketSC   *message,
                      ProtobufCBuffer     *buffer);
TimeUpdatePacketSC *
       time_update_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   time_update_packet_sc__free_unpacked
                     (TimeUpdatePacketSC *message,
                      ProtobufCAllocator *allocator);
/* EntityEquipmentPacketSC methods */
void   entity_equipment_packet_sc__init
                     (EntityEquipmentPacketSC         *message);
size_t entity_equipment_packet_sc__get_packed_size
                     (const EntityEquipmentPacketSC   *message);
size_t entity_equipment_packet_sc__pack
                     (const EntityEquipmentPacketSC   *message,
                      uint8_t             *out);
size_t entity_equipment_packet_sc__pack_to_buffer
                     (const EntityEquipmentPacketSC   *message,
                      ProtobufCBuffer     *buffer);
EntityEquipmentPacketSC *
       entity_equipment_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_equipment_packet_sc__free_unpacked
                     (EntityEquipmentPacketSC *message,
                      ProtobufCAllocator *allocator);
/* SpawnPositionPacketSC methods */
void   spawn_position_packet_sc__init
                     (SpawnPositionPacketSC         *message);
size_t spawn_position_packet_sc__get_packed_size
                     (const SpawnPositionPacketSC   *message);
size_t spawn_position_packet_sc__pack
                     (const SpawnPositionPacketSC   *message,
                      uint8_t             *out);
size_t spawn_position_packet_sc__pack_to_buffer
                     (const SpawnPositionPacketSC   *message,
                      ProtobufCBuffer     *buffer);
SpawnPositionPacketSC *
       spawn_position_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spawn_position_packet_sc__free_unpacked
                     (SpawnPositionPacketSC *message,
                      ProtobufCAllocator *allocator);
/* UseEntityPacketCS methods */
void   use_entity_packet_cs__init
                     (UseEntityPacketCS         *message);
size_t use_entity_packet_cs__get_packed_size
                     (const UseEntityPacketCS   *message);
size_t use_entity_packet_cs__pack
                     (const UseEntityPacketCS   *message,
                      uint8_t             *out);
size_t use_entity_packet_cs__pack_to_buffer
                     (const UseEntityPacketCS   *message,
                      ProtobufCBuffer     *buffer);
UseEntityPacketCS *
       use_entity_packet_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   use_entity_packet_cs__free_unpacked
                     (UseEntityPacketCS *message,
                      ProtobufCAllocator *allocator);
/* UpdateHealthPacketSC methods */
void   update_health_packet_sc__init
                     (UpdateHealthPacketSC         *message);
size_t update_health_packet_sc__get_packed_size
                     (const UpdateHealthPacketSC   *message);
size_t update_health_packet_sc__pack
                     (const UpdateHealthPacketSC   *message,
                      uint8_t             *out);
size_t update_health_packet_sc__pack_to_buffer
                     (const UpdateHealthPacketSC   *message,
                      ProtobufCBuffer     *buffer);
UpdateHealthPacketSC *
       update_health_packet_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_health_packet_sc__free_unpacked
                     (UpdateHealthPacketSC *message,
                      ProtobufCAllocator *allocator);
/* RespawnDataSC methods */
void   respawn_data_sc__init
                     (RespawnDataSC         *message);
size_t respawn_data_sc__get_packed_size
                     (const RespawnDataSC   *message);
size_t respawn_data_sc__pack
                     (const RespawnDataSC   *message,
                      uint8_t             *out);
size_t respawn_data_sc__pack_to_buffer
                     (const RespawnDataSC   *message,
                      ProtobufCBuffer     *buffer);
RespawnDataSC *
       respawn_data_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   respawn_data_sc__free_unpacked
                     (RespawnDataSC *message,
                      ProtobufCAllocator *allocator);
/* PlayerCS methods */
void   player_cs__init
                     (PlayerCS         *message);
size_t player_cs__get_packed_size
                     (const PlayerCS   *message);
size_t player_cs__pack
                     (const PlayerCS   *message,
                      uint8_t             *out);
size_t player_cs__pack_to_buffer
                     (const PlayerCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerCS *
       player_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_cs__free_unpacked
                     (PlayerCS *message,
                      ProtobufCAllocator *allocator);
/* PlayerPositionCS methods */
void   player_position_cs__init
                     (PlayerPositionCS         *message);
size_t player_position_cs__get_packed_size
                     (const PlayerPositionCS   *message);
size_t player_position_cs__pack
                     (const PlayerPositionCS   *message,
                      uint8_t             *out);
size_t player_position_cs__pack_to_buffer
                     (const PlayerPositionCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerPositionCS *
       player_position_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_position_cs__free_unpacked
                     (PlayerPositionCS *message,
                      ProtobufCAllocator *allocator);
/* PlayerLookCS methods */
void   player_look_cs__init
                     (PlayerLookCS         *message);
size_t player_look_cs__get_packed_size
                     (const PlayerLookCS   *message);
size_t player_look_cs__pack
                     (const PlayerLookCS   *message,
                      uint8_t             *out);
size_t player_look_cs__pack_to_buffer
                     (const PlayerLookCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerLookCS *
       player_look_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_look_cs__free_unpacked
                     (PlayerLookCS *message,
                      ProtobufCAllocator *allocator);
/* PlayerPositionAndLookCS methods */
void   player_position_and_look_cs__init
                     (PlayerPositionAndLookCS         *message);
size_t player_position_and_look_cs__get_packed_size
                     (const PlayerPositionAndLookCS   *message);
size_t player_position_and_look_cs__pack
                     (const PlayerPositionAndLookCS   *message,
                      uint8_t             *out);
size_t player_position_and_look_cs__pack_to_buffer
                     (const PlayerPositionAndLookCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerPositionAndLookCS *
       player_position_and_look_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_position_and_look_cs__free_unpacked
                     (PlayerPositionAndLookCS *message,
                      ProtobufCAllocator *allocator);
/* PlayerPositionAndLookSC methods */
void   player_position_and_look_sc__init
                     (PlayerPositionAndLookSC         *message);
size_t player_position_and_look_sc__get_packed_size
                     (const PlayerPositionAndLookSC   *message);
size_t player_position_and_look_sc__pack
                     (const PlayerPositionAndLookSC   *message,
                      uint8_t             *out);
size_t player_position_and_look_sc__pack_to_buffer
                     (const PlayerPositionAndLookSC   *message,
                      ProtobufCBuffer     *buffer);
PlayerPositionAndLookSC *
       player_position_and_look_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_position_and_look_sc__free_unpacked
                     (PlayerPositionAndLookSC *message,
                      ProtobufCAllocator *allocator);
/* PlayerDiggingCS methods */
void   player_digging_cs__init
                     (PlayerDiggingCS         *message);
size_t player_digging_cs__get_packed_size
                     (const PlayerDiggingCS   *message);
size_t player_digging_cs__pack
                     (const PlayerDiggingCS   *message,
                      uint8_t             *out);
size_t player_digging_cs__pack_to_buffer
                     (const PlayerDiggingCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerDiggingCS *
       player_digging_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_digging_cs__free_unpacked
                     (PlayerDiggingCS *message,
                      ProtobufCAllocator *allocator);
/* PlayerPlaceCS methods */
void   player_place_cs__init
                     (PlayerPlaceCS         *message);
size_t player_place_cs__get_packed_size
                     (const PlayerPlaceCS   *message);
size_t player_place_cs__pack
                     (const PlayerPlaceCS   *message,
                      uint8_t             *out);
size_t player_place_cs__pack_to_buffer
                     (const PlayerPlaceCS   *message,
                      ProtobufCBuffer     *buffer);
PlayerPlaceCS *
       player_place_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_place_cs__free_unpacked
                     (PlayerPlaceCS *message,
                      ProtobufCAllocator *allocator);
/* HeldItemChangeCS methods */
void   held_item_change_cs__init
                     (HeldItemChangeCS         *message);
size_t held_item_change_cs__get_packed_size
                     (const HeldItemChangeCS   *message);
size_t held_item_change_cs__pack
                     (const HeldItemChangeCS   *message,
                      uint8_t             *out);
size_t held_item_change_cs__pack_to_buffer
                     (const HeldItemChangeCS   *message,
                      ProtobufCBuffer     *buffer);
HeldItemChangeCS *
       held_item_change_cs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   held_item_change_cs__free_unpacked
                     (HeldItemChangeCS *message,
                      ProtobufCAllocator *allocator);
/* ItemData methods */
void   item_data__init
                     (ItemData         *message);
size_t item_data__get_packed_size
                     (const ItemData   *message);
size_t item_data__pack
                     (const ItemData   *message,
                      uint8_t             *out);
size_t item_data__pack_to_buffer
                     (const ItemData   *message,
                      ProtobufCBuffer     *buffer);
ItemData *
       item_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   item_data__free_unpacked
                     (ItemData *message,
                      ProtobufCAllocator *allocator);
/* AddToInventorySC methods */
void   add_to_inventory_sc__init
                     (AddToInventorySC         *message);
size_t add_to_inventory_sc__get_packed_size
                     (const AddToInventorySC   *message);
size_t add_to_inventory_sc__pack
                     (const AddToInventorySC   *message,
                      uint8_t             *out);
size_t add_to_inventory_sc__pack_to_buffer
                     (const AddToInventorySC   *message,
                      ProtobufCBuffer     *buffer);
AddToInventorySC *
       add_to_inventory_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_to_inventory_sc__free_unpacked
                     (AddToInventorySC *message,
                      ProtobufCAllocator *allocator);
/* EntityAnimation methods */
void   entity_animation__init
                     (EntityAnimation         *message);
size_t entity_animation__get_packed_size
                     (const EntityAnimation   *message);
size_t entity_animation__pack
                     (const EntityAnimation   *message,
                      uint8_t             *out);
size_t entity_animation__pack_to_buffer
                     (const EntityAnimation   *message,
                      ProtobufCBuffer     *buffer);
EntityAnimation *
       entity_animation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_animation__free_unpacked
                     (EntityAnimation *message,
                      ProtobufCAllocator *allocator);
/* SpawnNamedEntitySC methods */
void   spawn_named_entity_sc__init
                     (SpawnNamedEntitySC         *message);
size_t spawn_named_entity_sc__get_packed_size
                     (const SpawnNamedEntitySC   *message);
size_t spawn_named_entity_sc__pack
                     (const SpawnNamedEntitySC   *message,
                      uint8_t             *out);
size_t spawn_named_entity_sc__pack_to_buffer
                     (const SpawnNamedEntitySC   *message,
                      ProtobufCBuffer     *buffer);
SpawnNamedEntitySC *
       spawn_named_entity_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spawn_named_entity_sc__free_unpacked
                     (SpawnNamedEntitySC *message,
                      ProtobufCAllocator *allocator);
/* SpawnDroppedItemSC methods */
void   spawn_dropped_item_sc__init
                     (SpawnDroppedItemSC         *message);
size_t spawn_dropped_item_sc__get_packed_size
                     (const SpawnDroppedItemSC   *message);
size_t spawn_dropped_item_sc__pack
                     (const SpawnDroppedItemSC   *message,
                      uint8_t             *out);
size_t spawn_dropped_item_sc__pack_to_buffer
                     (const SpawnDroppedItemSC   *message,
                      ProtobufCBuffer     *buffer);
SpawnDroppedItemSC *
       spawn_dropped_item_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spawn_dropped_item_sc__free_unpacked
                     (SpawnDroppedItemSC *message,
                      ProtobufCAllocator *allocator);
/* CollectItemSC methods */
void   collect_item_sc__init
                     (CollectItemSC         *message);
size_t collect_item_sc__get_packed_size
                     (const CollectItemSC   *message);
size_t collect_item_sc__pack
                     (const CollectItemSC   *message,
                      uint8_t             *out);
size_t collect_item_sc__pack_to_buffer
                     (const CollectItemSC   *message,
                      ProtobufCBuffer     *buffer);
CollectItemSC *
       collect_item_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   collect_item_sc__free_unpacked
                     (CollectItemSC *message,
                      ProtobufCAllocator *allocator);
/* SpawnObjectSC methods */
void   spawn_object_sc__init
                     (SpawnObjectSC         *message);
size_t spawn_object_sc__get_packed_size
                     (const SpawnObjectSC   *message);
size_t spawn_object_sc__pack
                     (const SpawnObjectSC   *message,
                      uint8_t             *out);
size_t spawn_object_sc__pack_to_buffer
                     (const SpawnObjectSC   *message,
                      ProtobufCBuffer     *buffer);
SpawnObjectSC *
       spawn_object_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spawn_object_sc__free_unpacked
                     (SpawnObjectSC *message,
                      ProtobufCAllocator *allocator);
/* SpawnMobSC methods */
void   spawn_mob_sc__init
                     (SpawnMobSC         *message);
size_t spawn_mob_sc__get_packed_size
                     (const SpawnMobSC   *message);
size_t spawn_mob_sc__pack
                     (const SpawnMobSC   *message,
                      uint8_t             *out);
size_t spawn_mob_sc__pack_to_buffer
                     (const SpawnMobSC   *message,
                      ProtobufCBuffer     *buffer);
SpawnMobSC *
       spawn_mob_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spawn_mob_sc__free_unpacked
                     (SpawnMobSC *message,
                      ProtobufCAllocator *allocator);
/* EntityVelocitySC methods */
void   entity_velocity_sc__init
                     (EntityVelocitySC         *message);
size_t entity_velocity_sc__get_packed_size
                     (const EntityVelocitySC   *message);
size_t entity_velocity_sc__pack
                     (const EntityVelocitySC   *message,
                      uint8_t             *out);
size_t entity_velocity_sc__pack_to_buffer
                     (const EntityVelocitySC   *message,
                      ProtobufCBuffer     *buffer);
EntityVelocitySC *
       entity_velocity_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_velocity_sc__free_unpacked
                     (EntityVelocitySC *message,
                      ProtobufCAllocator *allocator);
/* EntityDestroySC methods */
void   entity_destroy_sc__init
                     (EntityDestroySC         *message);
size_t entity_destroy_sc__get_packed_size
                     (const EntityDestroySC   *message);
size_t entity_destroy_sc__pack
                     (const EntityDestroySC   *message,
                      uint8_t             *out);
size_t entity_destroy_sc__pack_to_buffer
                     (const EntityDestroySC   *message,
                      ProtobufCBuffer     *buffer);
EntityDestroySC *
       entity_destroy_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_destroy_sc__free_unpacked
                     (EntityDestroySC *message,
                      ProtobufCAllocator *allocator);
/* EntitySC methods */
void   entity_sc__init
                     (EntitySC         *message);
size_t entity_sc__get_packed_size
                     (const EntitySC   *message);
size_t entity_sc__pack
                     (const EntitySC   *message,
                      uint8_t             *out);
size_t entity_sc__pack_to_buffer
                     (const EntitySC   *message,
                      ProtobufCBuffer     *buffer);
EntitySC *
       entity_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_sc__free_unpacked
                     (EntitySC *message,
                      ProtobufCAllocator *allocator);
/* EntityRelativeMoveSC methods */
void   entity_relative_move_sc__init
                     (EntityRelativeMoveSC         *message);
size_t entity_relative_move_sc__get_packed_size
                     (const EntityRelativeMoveSC   *message);
size_t entity_relative_move_sc__pack
                     (const EntityRelativeMoveSC   *message,
                      uint8_t             *out);
size_t entity_relative_move_sc__pack_to_buffer
                     (const EntityRelativeMoveSC   *message,
                      ProtobufCBuffer     *buffer);
EntityRelativeMoveSC *
       entity_relative_move_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_relative_move_sc__free_unpacked
                     (EntityRelativeMoveSC *message,
                      ProtobufCAllocator *allocator);
/* EntityLookSC methods */
void   entity_look_sc__init
                     (EntityLookSC         *message);
size_t entity_look_sc__get_packed_size
                     (const EntityLookSC   *message);
size_t entity_look_sc__pack
                     (const EntityLookSC   *message,
                      uint8_t             *out);
size_t entity_look_sc__pack_to_buffer
                     (const EntityLookSC   *message,
                      ProtobufCBuffer     *buffer);
EntityLookSC *
       entity_look_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_look_sc__free_unpacked
                     (EntityLookSC *message,
                      ProtobufCAllocator *allocator);
/* EntityLookAndRelativeMoveSC methods */
void   entity_look_and_relative_move_sc__init
                     (EntityLookAndRelativeMoveSC         *message);
size_t entity_look_and_relative_move_sc__get_packed_size
                     (const EntityLookAndRelativeMoveSC   *message);
size_t entity_look_and_relative_move_sc__pack
                     (const EntityLookAndRelativeMoveSC   *message,
                      uint8_t             *out);
size_t entity_look_and_relative_move_sc__pack_to_buffer
                     (const EntityLookAndRelativeMoveSC   *message,
                      ProtobufCBuffer     *buffer);
EntityLookAndRelativeMoveSC *
       entity_look_and_relative_move_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_look_and_relative_move_sc__free_unpacked
                     (EntityLookAndRelativeMoveSC *message,
                      ProtobufCAllocator *allocator);
/* EntityTeleportSC methods */
void   entity_teleport_sc__init
                     (EntityTeleportSC         *message);
size_t entity_teleport_sc__get_packed_size
                     (const EntityTeleportSC   *message);
size_t entity_teleport_sc__pack
                     (const EntityTeleportSC   *message,
                      uint8_t             *out);
size_t entity_teleport_sc__pack_to_buffer
                     (const EntityTeleportSC   *message,
                      ProtobufCBuffer     *buffer);
EntityTeleportSC *
       entity_teleport_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_teleport_sc__free_unpacked
                     (EntityTeleportSC *message,
                      ProtobufCAllocator *allocator);
/* EntityStatusSC methods */
void   entity_status_sc__init
                     (EntityStatusSC         *message);
size_t entity_status_sc__get_packed_size
                     (const EntityStatusSC   *message);
size_t entity_status_sc__pack
                     (const EntityStatusSC   *message,
                      uint8_t             *out);
size_t entity_status_sc__pack_to_buffer
                     (const EntityStatusSC   *message,
                      ProtobufCBuffer     *buffer);
EntityStatusSC *
       entity_status_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   entity_status_sc__free_unpacked
                     (EntityStatusSC *message,
                      ProtobufCAllocator *allocator);
/* AttachEntitySC methods */
void   attach_entity_sc__init
                     (AttachEntitySC         *message);
size_t attach_entity_sc__get_packed_size
                     (const AttachEntitySC   *message);
size_t attach_entity_sc__pack
                     (const AttachEntitySC   *message,
                      uint8_t             *out);
size_t attach_entity_sc__pack_to_buffer
                     (const AttachEntitySC   *message,
                      ProtobufCBuffer     *buffer);
AttachEntitySC *
       attach_entity_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attach_entity_sc__free_unpacked
                     (AttachEntitySC *message,
                      ProtobufCAllocator *allocator);
/* LevelInitializeSC methods */
void   level_initialize_sc__init
                     (LevelInitializeSC         *message);
size_t level_initialize_sc__get_packed_size
                     (const LevelInitializeSC   *message);
size_t level_initialize_sc__pack
                     (const LevelInitializeSC   *message,
                      uint8_t             *out);
size_t level_initialize_sc__pack_to_buffer
                     (const LevelInitializeSC   *message,
                      ProtobufCBuffer     *buffer);
LevelInitializeSC *
       level_initialize_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   level_initialize_sc__free_unpacked
                     (LevelInitializeSC *message,
                      ProtobufCAllocator *allocator);
/* LevelDataSC methods */
void   level_data_sc__init
                     (LevelDataSC         *message);
size_t level_data_sc__get_packed_size
                     (const LevelDataSC   *message);
size_t level_data_sc__pack
                     (const LevelDataSC   *message,
                      uint8_t             *out);
size_t level_data_sc__pack_to_buffer
                     (const LevelDataSC   *message,
                      ProtobufCBuffer     *buffer);
LevelDataSC *
       level_data_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   level_data_sc__free_unpacked
                     (LevelDataSC *message,
                      ProtobufCAllocator *allocator);
/* LevelFinalizeSC methods */
void   level_finalize_sc__init
                     (LevelFinalizeSC         *message);
size_t level_finalize_sc__get_packed_size
                     (const LevelFinalizeSC   *message);
size_t level_finalize_sc__pack
                     (const LevelFinalizeSC   *message,
                      uint8_t             *out);
size_t level_finalize_sc__pack_to_buffer
                     (const LevelFinalizeSC   *message,
                      ProtobufCBuffer     *buffer);
LevelFinalizeSC *
       level_finalize_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   level_finalize_sc__free_unpacked
                     (LevelFinalizeSC *message,
                      ProtobufCAllocator *allocator);
/* MultiBlockChangeSC methods */
void   multi_block_change_sc__init
                     (MultiBlockChangeSC         *message);
size_t multi_block_change_sc__get_packed_size
                     (const MultiBlockChangeSC   *message);
size_t multi_block_change_sc__pack
                     (const MultiBlockChangeSC   *message,
                      uint8_t             *out);
size_t multi_block_change_sc__pack_to_buffer
                     (const MultiBlockChangeSC   *message,
                      ProtobufCBuffer     *buffer);
MultiBlockChangeSC *
       multi_block_change_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   multi_block_change_sc__free_unpacked
                     (MultiBlockChangeSC *message,
                      ProtobufCAllocator *allocator);
/* BlockChangeSC methods */
void   block_change_sc__init
                     (BlockChangeSC         *message);
size_t block_change_sc__get_packed_size
                     (const BlockChangeSC   *message);
size_t block_change_sc__pack
                     (const BlockChangeSC   *message,
                      uint8_t             *out);
size_t block_change_sc__pack_to_buffer
                     (const BlockChangeSC   *message,
                      ProtobufCBuffer     *buffer);
BlockChangeSC *
       block_change_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   block_change_sc__free_unpacked
                     (BlockChangeSC *message,
                      ProtobufCAllocator *allocator);
/* TileEntitySC methods */
void   tile_entity_sc__init
                     (TileEntitySC         *message);
size_t tile_entity_sc__get_packed_size
                     (const TileEntitySC   *message);
size_t tile_entity_sc__pack
                     (const TileEntitySC   *message,
                      uint8_t             *out);
size_t tile_entity_sc__pack_to_buffer
                     (const TileEntitySC   *message,
                      ProtobufCBuffer     *buffer);
TileEntitySC *
       tile_entity_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tile_entity_sc__free_unpacked
                     (TileEntitySC *message,
                      ProtobufCAllocator *allocator);
/* ExplosionSC methods */
void   explosion_sc__init
                     (ExplosionSC         *message);
size_t explosion_sc__get_packed_size
                     (const ExplosionSC   *message);
size_t explosion_sc__pack
                     (const ExplosionSC   *message,
                      uint8_t             *out);
size_t explosion_sc__pack_to_buffer
                     (const ExplosionSC   *message,
                      ProtobufCBuffer     *buffer);
ExplosionSC *
       explosion_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   explosion_sc__free_unpacked
                     (ExplosionSC *message,
                      ProtobufCAllocator *allocator);
/* KickSC methods */
void   kick_sc__init
                     (KickSC         *message);
size_t kick_sc__get_packed_size
                     (const KickSC   *message);
size_t kick_sc__pack
                     (const KickSC   *message,
                      uint8_t             *out);
size_t kick_sc__pack_to_buffer
                     (const KickSC   *message,
                      ProtobufCBuffer     *buffer);
KickSC *
       kick_sc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kick_sc__free_unpacked
                     (KickSC *message,
                      ProtobufCAllocator *allocator);
/* GeneralPacket methods */
void   general_packet__init
                     (GeneralPacket         *message);
size_t general_packet__get_packed_size
                     (const GeneralPacket   *message);
size_t general_packet__pack
                     (const GeneralPacket   *message,
                      uint8_t             *out);
size_t general_packet__pack_to_buffer
                     (const GeneralPacket   *message,
                      ProtobufCBuffer     *buffer);
GeneralPacket *
       general_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   general_packet__free_unpacked
                     (GeneralPacket *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NetString_Closure)
                 (const NetString *message,
                  void *closure_data);
typedef void (*KeepAlivePacket_Closure)
                 (const KeepAlivePacket *message,
                  void *closure_data);
typedef void (*LoginPacketCS_Closure)
                 (const LoginPacketCS *message,
                  void *closure_data);
typedef void (*LoginPacketSC_Closure)
                 (const LoginPacketSC *message,
                  void *closure_data);
typedef void (*HandshakePacketCS_Closure)
                 (const HandshakePacketCS *message,
                  void *closure_data);
typedef void (*HandshakePacketSC_Closure)
                 (const HandshakePacketSC *message,
                  void *closure_data);
typedef void (*ChatMessagePacket_Closure)
                 (const ChatMessagePacket *message,
                  void *closure_data);
typedef void (*TimeUpdatePacketSC_Closure)
                 (const TimeUpdatePacketSC *message,
                  void *closure_data);
typedef void (*EntityEquipmentPacketSC_Closure)
                 (const EntityEquipmentPacketSC *message,
                  void *closure_data);
typedef void (*SpawnPositionPacketSC_Closure)
                 (const SpawnPositionPacketSC *message,
                  void *closure_data);
typedef void (*UseEntityPacketCS_Closure)
                 (const UseEntityPacketCS *message,
                  void *closure_data);
typedef void (*UpdateHealthPacketSC_Closure)
                 (const UpdateHealthPacketSC *message,
                  void *closure_data);
typedef void (*RespawnDataSC_Closure)
                 (const RespawnDataSC *message,
                  void *closure_data);
typedef void (*PlayerCS_Closure)
                 (const PlayerCS *message,
                  void *closure_data);
typedef void (*PlayerPositionCS_Closure)
                 (const PlayerPositionCS *message,
                  void *closure_data);
typedef void (*PlayerLookCS_Closure)
                 (const PlayerLookCS *message,
                  void *closure_data);
typedef void (*PlayerPositionAndLookCS_Closure)
                 (const PlayerPositionAndLookCS *message,
                  void *closure_data);
typedef void (*PlayerPositionAndLookSC_Closure)
                 (const PlayerPositionAndLookSC *message,
                  void *closure_data);
typedef void (*PlayerDiggingCS_Closure)
                 (const PlayerDiggingCS *message,
                  void *closure_data);
typedef void (*PlayerPlaceCS_Closure)
                 (const PlayerPlaceCS *message,
                  void *closure_data);
typedef void (*HeldItemChangeCS_Closure)
                 (const HeldItemChangeCS *message,
                  void *closure_data);
typedef void (*ItemData_Closure)
                 (const ItemData *message,
                  void *closure_data);
typedef void (*AddToInventorySC_Closure)
                 (const AddToInventorySC *message,
                  void *closure_data);
typedef void (*EntityAnimation_Closure)
                 (const EntityAnimation *message,
                  void *closure_data);
typedef void (*SpawnNamedEntitySC_Closure)
                 (const SpawnNamedEntitySC *message,
                  void *closure_data);
typedef void (*SpawnDroppedItemSC_Closure)
                 (const SpawnDroppedItemSC *message,
                  void *closure_data);
typedef void (*CollectItemSC_Closure)
                 (const CollectItemSC *message,
                  void *closure_data);
typedef void (*SpawnObjectSC_Closure)
                 (const SpawnObjectSC *message,
                  void *closure_data);
typedef void (*SpawnMobSC_Closure)
                 (const SpawnMobSC *message,
                  void *closure_data);
typedef void (*EntityVelocitySC_Closure)
                 (const EntityVelocitySC *message,
                  void *closure_data);
typedef void (*EntityDestroySC_Closure)
                 (const EntityDestroySC *message,
                  void *closure_data);
typedef void (*EntitySC_Closure)
                 (const EntitySC *message,
                  void *closure_data);
typedef void (*EntityRelativeMoveSC_Closure)
                 (const EntityRelativeMoveSC *message,
                  void *closure_data);
typedef void (*EntityLookSC_Closure)
                 (const EntityLookSC *message,
                  void *closure_data);
typedef void (*EntityLookAndRelativeMoveSC_Closure)
                 (const EntityLookAndRelativeMoveSC *message,
                  void *closure_data);
typedef void (*EntityTeleportSC_Closure)
                 (const EntityTeleportSC *message,
                  void *closure_data);
typedef void (*EntityStatusSC_Closure)
                 (const EntityStatusSC *message,
                  void *closure_data);
typedef void (*AttachEntitySC_Closure)
                 (const AttachEntitySC *message,
                  void *closure_data);
typedef void (*LevelInitializeSC_Closure)
                 (const LevelInitializeSC *message,
                  void *closure_data);
typedef void (*LevelDataSC_Closure)
                 (const LevelDataSC *message,
                  void *closure_data);
typedef void (*LevelFinalizeSC_Closure)
                 (const LevelFinalizeSC *message,
                  void *closure_data);
typedef void (*MultiBlockChangeSC_Closure)
                 (const MultiBlockChangeSC *message,
                  void *closure_data);
typedef void (*BlockChangeSC_Closure)
                 (const BlockChangeSC *message,
                  void *closure_data);
typedef void (*TileEntitySC_Closure)
                 (const TileEntitySC *message,
                  void *closure_data);
typedef void (*ExplosionSC_Closure)
                 (const ExplosionSC *message,
                  void *closure_data);
typedef void (*KickSC_Closure)
                 (const KickSC *message,
                  void *closure_data);
typedef void (*GeneralPacket_Closure)
                 (const GeneralPacket *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    packet_type__descriptor;
extern const ProtobufCMessageDescriptor net_string__descriptor;
extern const ProtobufCMessageDescriptor keep_alive_packet__descriptor;
extern const ProtobufCMessageDescriptor login_packet_cs__descriptor;
extern const ProtobufCMessageDescriptor login_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor handshake_packet_cs__descriptor;
extern const ProtobufCMessageDescriptor handshake_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor chat_message_packet__descriptor;
extern const ProtobufCMessageDescriptor time_update_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_equipment_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor spawn_position_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor use_entity_packet_cs__descriptor;
extern const ProtobufCMessageDescriptor update_health_packet_sc__descriptor;
extern const ProtobufCMessageDescriptor respawn_data_sc__descriptor;
extern const ProtobufCMessageDescriptor player_cs__descriptor;
extern const ProtobufCMessageDescriptor player_position_cs__descriptor;
extern const ProtobufCMessageDescriptor player_look_cs__descriptor;
extern const ProtobufCMessageDescriptor player_position_and_look_cs__descriptor;
extern const ProtobufCMessageDescriptor player_position_and_look_sc__descriptor;
extern const ProtobufCMessageDescriptor player_digging_cs__descriptor;
extern const ProtobufCMessageDescriptor player_place_cs__descriptor;
extern const ProtobufCMessageDescriptor held_item_change_cs__descriptor;
extern const ProtobufCMessageDescriptor item_data__descriptor;
extern const ProtobufCMessageDescriptor add_to_inventory_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_animation__descriptor;
extern const ProtobufCMessageDescriptor spawn_named_entity_sc__descriptor;
extern const ProtobufCMessageDescriptor spawn_dropped_item_sc__descriptor;
extern const ProtobufCMessageDescriptor collect_item_sc__descriptor;
extern const ProtobufCMessageDescriptor spawn_object_sc__descriptor;
extern const ProtobufCMessageDescriptor spawn_mob_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_velocity_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_destroy_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_relative_move_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_look_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_look_and_relative_move_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_teleport_sc__descriptor;
extern const ProtobufCMessageDescriptor entity_status_sc__descriptor;
extern const ProtobufCMessageDescriptor attach_entity_sc__descriptor;
extern const ProtobufCMessageDescriptor level_initialize_sc__descriptor;
extern const ProtobufCMessageDescriptor level_data_sc__descriptor;
extern const ProtobufCMessageDescriptor level_finalize_sc__descriptor;
extern const ProtobufCMessageDescriptor multi_block_change_sc__descriptor;
extern const ProtobufCMessageDescriptor block_change_sc__descriptor;
extern const ProtobufCMessageDescriptor tile_entity_sc__descriptor;
extern const ProtobufCMessageDescriptor explosion_sc__descriptor;
extern const ProtobufCMessageDescriptor kick_sc__descriptor;
extern const ProtobufCMessageDescriptor general_packet__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_CC_2falphaindev_2eproto__INCLUDED */
